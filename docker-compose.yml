# This Docker-Compose file is DEMO. Will pull released docker images from DockerHub.
version: "3.3"

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 9092:9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "9080:8080"
    restart: always
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
  #  Create a service named db.
  db:
    #   Use the Docker Image postgres. This will pull the newest release.
    image: "postgres:11-alpine"
    #   Give the container the name my_postgres. You can changes to something else.
    container_name: "adorsys_twitter"
    #   Setup the username, password, and database name. You can changes these values.
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=testdb
    #   Maps port 5442 (localhost) to port 5432 on the container. You can change the ports to fix your needs.
    ports:
      - "5442:5432"
    #   Set a volume some that database is not lost after shutting down the container.
    #   I used the name postgres-data but you can changed it to something else.
    volumes:
      - ./postgres-data:/var/lib/debug/postgresql/data
      # - .src/main/resources/db/init.sql:/docker-entrypoint-initdb.d/init.sql
networks:
  adorsys_twitter: